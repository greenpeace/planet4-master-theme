// Mobile-only (up to 576px)
@mixin mobile-only {
  @media (max-width: #{$small-width}) {
    @content;
  }
}

// Mobile & Up (greater than to 576px)
@mixin small-and-up {
  @media (min-width: #{$small-width}) {
    @content;
  }
}

// Tablet & Up (greater than 768px)
@mixin medium-and-up {
  @media (min-width: #{$medium-width}) {
    @content;
  }
}

// Large Tablet & Up (greater than 992px)
@mixin large-and-up {
  @media (min-width: #{$large-width}) {
    @content;
  }
}

// Large Desktop & Up (greater than 1200px)
@mixin x-large-and-up {
  @media (min-width: #{$extra-large-width}) {
    @content;
  }
}

// Very large Desktop & Up (greater than 1600px)
@mixin xx-large-and-up {
  @media (min-width: #{$extra-extra-large-width}) {
    @content;
  }
}

// Mobile, small and medium width (less than 992px)
@mixin small-and-less {
  @media (max-width: #{$medium-width - 1}) {
    @content;
  }
}

// Mobile, small and medium width (less than 992px)
@mixin medium-and-less {
  @media (max-width: #{$large-width - 1}) {
    @content;
  }
}

// Mobile, small, medium and large width (less than 1200px)
@mixin large-and-less {
  @media (max-width: #{$extra-large-width - 1}) {
    @content;
  }
}

// Margins and padding. Use to consistently apply gutters
// use like this: @include padding($left: $sp-2, $right: $sp-2); wich will be compiled as padding-left: 16px; padding-right: 16px;

// To use as negative numbers interpolate these as follows...
// @include margin($top: -#{$sp-1}, $right: $sp-2x, $bottom: $sp-1, $left: 0); which will be compiled as margin: -8, 20px 8px 0px;

@mixin padding($top: null, $right: null, $bottom: null, $left: null) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}

@mixin margin($top: null, $right: null, $bottom: null, $left: null) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}

// Usage: @include transition(all 0.2s ease-in-out);
@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes: ("-webkit-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: $transition;
  }
}

// Cause an element to match the size of its stacking context parent.
@mixin fill-container() {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

// Move an element at the top-left corner of its nearest ancestor and set its width and height to 100%.
@mixin absolute-position {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// Build a linear gradient with a direction and any number of color stops.
@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1); /* Old browsers */
  background: -moz-linear-gradient(legacy-direction($direction), $color-stops); /* FF3.6-15 */
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops); /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient($direction, $color-stops); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
}

// Create a gradient with hard stops that lines up. Colors layout from top-right to bottom-left.
@mixin skewed-gradient($color1, $color2, $color3, $color4, $color5, $angle: 245deg) {
  @include linear-gradient(
    $angle,
    #{$color1} 6%,
    #{$color2} 6%,
    #{$color2} 35%,
    #{$color3} 35%,
    #{$color3} 80%,
    #{$color4} 80%,
    #{$color4} 95%,
    #{$color5} 95%
  );

  @include large-and-up {
    @include linear-gradient(
      $angle,
      #{$color1} 15%,
      #{$color2} 15%,
      #{$color2} 45%,
      #{$color3} 45%,
      #{$color3} 80%,
      #{$color4} 80%,
      #{$color4} 90%,
      #{$color5} 90%
    );
  }
}

@mixin detailed-skewed-gradient($color1, $color2, $color3, $color4, $color5, $color6, $color7, $color8, $angle: 245deg) {
  @include linear-gradient(
    $angle,
    #{$color1} 6%,
    #{$color2} 6%,
    #{$color3} 35%,
    #{$color4} 35%,
    #{$color5} 80%,
    #{$color6} 80%,
    #{$color7} 95%,
    #{$color8} 95%
  );

  @include large-and-up {
    @include linear-gradient(
      $angle,
      #{$color1} 15%,
      #{$color2} 15%,
      #{$color3} 45%,
      #{$color4} 45%,
      #{$color5} 80%,
      #{$color6} 80%,
      #{$color7} 90%,
      #{$color8} 90%
    );
  }
}

@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

@mixin background-before-opacity($color, $opacity: 0.6) {
  &:before {
    content: "";
    background: ($color);
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    opacity: $opacity;
  }
}

@mixin background($imgpath, $position: center, $repeat: no-repeat, $size: cover) {
  background: {
    image: url($imgpath);
    position: $position;
    repeat: $repeat;
    size: $size;
  }
}

// Skew mixin
@mixin skew($side: right, $deg: -20deg, $right: -15px, $left: -15px, $width: 30px, $bg: $white) {
  position: relative;

  &:before {
    z-index: -1;
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;

    @if $side == right {
      right: $right;
    }
    @else if $side == left {
      left: $left;
    }

    display: block;
    width: $width;
    background: $bg;
    transform: skew($deg);
  }
}

/* Generates mutilevel nested comments
level-1 is the first level comment with a margin of 50px
level-2 is the first level comment with a margin of 100px
and so on...
*/
$comment-nest-level: 6;
$nested-comment-left-margin: 50px;
@mixin comment-level {
  @for $i from 1 through $comment-nest-level {
    .comment-level-#{$i} {
      margin-left: $nested-comment-left-margin * $i !important;
    }
  }
}

@mixin scrollbar-layout {
  // Only applied to Firefox
  scrollbar-width: thin;
  scrollbar-color: transparent;

  &::-webkit-scrollbar {
    width: 8px;
  }

  &::-webkit-scrollbar-track {
    border-radius: 4px;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: 4px;
    background: rgba(0, 0, 0, 0.15);
  }

  &::-webkit-scrollbar-thumb:hover {
    background: rgba(0, 0, 0, 0.2);
  }
}

// Apply background effect to link
@mixin shared-link-styles {
  border-bottom: 2px solid var(--gp-green-500);
  background-repeat: no-repeat;
  background-image: linear-gradient(90deg, var(--color-background-link--hover), var(--color-background-link--hover));
  background-size: 100% 0;
  background-position: bottom;
  transition: background-size .15s ease;

  &:hover {
    background-size: 100% 100%;
  }

  &:hover,
  &:active {
    text-decoration: none !important;
  }
}

@mixin rounded-image-size($size) {
  figure,
  img {
    border-radius: 50%;
    max-height: $size;
  }

  img {
    object-fit: cover;
    aspect-ratio: 1;
  }
}

@mixin square-image-size($size) {
  figure,
  img {
    height: $size;
    width: $size;
  }

  img {
    object-fit: cover;
  }
}

@mixin clamp-text($lines) {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  line-clamp: $lines;
  -webkit-line-clamp: $lines;
  overflow: hidden;
}

// Focus styles for buttons, links, etc
@mixin focus-styles {
  outline: 2px solid #99c3ff;
  outline-offset: 1px;
  border-radius: 4px;
}

// Apply custom layout to checkboxes
@mixin custom-checkbox {
  position: relative;

  & > input[type="checkbox"] {
    position: absolute;
    pointer-events: none;
    width: $checkbox-size;
    height: $checkbox-size;
    top: 50% !important;
    transform: translateY(-50%);
    opacity: 0;

    & ~ label,
    & ~ .custom-control-description {
      padding-inline-start: $sp-4x;
      font-family: var(--font-family-tertiary);
      cursor: pointer;

      a {
        color: inherit;
        font-weight: bold;
      }
    }
  }

  &:before, &:after {
    content: "";
    display: block;
    position: absolute;
    width: $checkbox-size;
    height: $checkbox-size;
    background: var(--white);
    border: 1px solid var(--grey-500);
    border-radius: 2px;
    pointer-events: none;
    top: 50%;
    transform: translateY(-50%);
  }

  &:after {
    z-index: 1;
  }

  &:focus,
  &:focus-visible {
    outline: 2px solid orange !important;
    outline-offset: 1px;
  }

  &:has(> input[type="checkbox"]:checked) {
    &::after {
      content: "";
      position: absolute;
      border: 0;
      border-bottom: 2px solid var(--grey-900);
      border-right: 2px solid var(--grey-900);
      height: 8px;
      margin-inline-start: $sp-x;
      top: calc(50% - 5px);
      transform: rotate(-45deg) scaleX(-1);
      width: 12px;
    }

    &::before {
      border-color: var(--grey-900);
    }
  }

  &:has(> input[type="checkbox"]:not(:checked)):hover::before {
    border-color: var(--grey-900);
    z-index: 2;
  }

  &:has(> input[type="checkbox"]:focus) {
    &::before {
      @include focus-styles;
    }
  }
}
